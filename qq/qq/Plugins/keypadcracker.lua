local qq = eqqlocal Plugin = {	Name = "Keypad Cracker",	Alias = "keypadcracker"}local VecMeta = qq.Meta.Veclocal EntMeta = qq.Meta.Entlocal PlyMeta = qq.Meta.Plylocal X = -50local Y = -100local W = 100local H = 200Plugin.KeyPos =	{	{X+5, Y+100, 25, 25, -2.2, 3.45, 1.3, -0},	{X+37.5, Y+100, 25, 25, -0.6, 1.85, 1.3, -0},	{X+70, Y+100, 25, 25, 1.0, 0.25, 1.3, -0},	{X+5, Y+132.5, 25, 25, -2.2, 3.45, 2.9, -1.6},	{X+37.5, Y+132.5, 25, 25, -0.6, 1.85, 2.9, -1.6},	{X+70, Y+132.5, 25, 25, 1.0, 0.25, 2.9, -1.6},	{X+5, Y+165, 25, 25, -2.2, 3.45, 4.55, -3.3},	{X+37.5, Y+165, 25, 25, -0.6, 1.85, 4.55, -3.3},	{X+70, Y+165, 25, 25, 1.0, 0.25, 4.55, -3.3},	{X+5, Y+67.5, 40, 25, -2.2, 4.25, -0.3, 1.6},	{X+55, Y+67.5, 40, 25, 0.3, 1.65, -0.3, 1.6}}--[[ this code is just WRONGPlugin.KeyPressed = function( kp, pl )--should be pl, kp	if not ValidEntity(pl) or not type(pl) == "Player" or  then return end--not checking if its the E key	local t = {} --reuse table	t.start = PlyMeta.GetShootPos(pl)	t.endpos = Plugin.GetOldAim(pl) * 32 + t.start	t.filter = pl	local tr = util.TraceLine(t)--ply:GetEyeTrace gets cached, USE IT!		local pos = EntMeta.WorldToLocal(kp, tr.HitPos)	local Num = tostring( EntMeta.GetNetworkedInt(kp, "keypad_num") )		for k,v in pairs(Plugin.KeyPos) do		local x = (pos.y - v[5]) / (v[5] + v[6])		local y = 1 - (pos.z + v[7]) / (v[7] + v[8])				if (x >= 0) and (y >= 0) and (x <= 1) and (y <= 1) then 			local key = tostring(k)			local log = kp.log or ""			kp.log = string.Right( log .. k, 10 )		end	endend]]Plugin.Log = {}Plugin.LogPlayerAim = function(pl)	local log = Plugin.Log[pl] or {}	local ct = CurTime()	log[ct] = PlyMeta.GetAimVector(pl)	local _, latency = qq.Module.GetLatency(0)	local _, latency2 = qq.Module.GetLatency(1)		latency = latency2	local newcopy = {}		for k,v in pairs(log) do // We only want the new crap :P		if ct - k < latency then			newcopy[k] = v		end	end		Plugin.Log[pl] = newcopyendPlugin.GetOldAim = function(pl)	local _, latency = qq.Module.GetLatency(1)	local ct = CurTime()	local highest = 0	local best	for k,v in pairs(Plugin.Log[pl]) do		local ago = ct - k		if ago > highest then			highest = ago			best = v		end	end	//if best then return best end	return PlyMeta.GetAimVector(pl)endPlugin.ThinkPlayer = function(pl)	local trace = PlyMeta.GetEyeTrace(pl)	local kp = trace.Entity	if not ValidEntity(kp) then return end	if EntMeta.GetClass(kp) != "sent_keypad" then return end		if VecMeta.Length(trace.HitPos - PlyMeta.GetShootPos(pl)) > 100 then return end		Plugin.LogPlayerAim(pl)		local last = kp.last or 0	local new = string.len( tostring( EntMeta.GetNetworkedInt(kp, "keypad_num") ) )		local hascode = EntMeta.GetNetworkedInt(kp, "keypad_num")	if hascode == 0 then new = 0 end		local Access = EntMeta.GetNetworkedBool(kp,"keypad_access") // if they got in	local ShowAccess = EntMeta.GetNetworkedBool(kp,"keypad_showaccess") // wether its showing		if last != new or ShowAccess then // Something changed		if ShowAccess then // accept or cancle been pressed 					if Access and ShowAccess then // code enterd				if kp.log != " " then					local Num = string.len( tostring( EntMeta.GetNetworkedInt(kp, "keypad_num") ) )					kp.code = string.Right( kp.log, Num )					kp.log = " "					kp.last = 0					qq.Inform("Code Found! {1}", kp.code)				end			else // They cancled				kp.log = ""				kp.last = 0			end		elseif new > last then			kp.last = new			Plugin.KeyPressed( kp, pl )		end	end	kp.last = newendPlugin.HUDPaintEntity = function(ent)	if EntMeta.GetClass(ent) != "sent_keypad" then return end	local entpos = EntMeta.GetPos(ent)	local dist = VecMeta.Length(entpos - PlyMeta.GetShootPos(LocalPlayer()))		if dist > 500 then return end		local pos = VecMeta.ToScreen(entpos)		local text = ent.code or "Not Found"	draw.WordBox( 8, pos.x - 15, pos.y - 15, text, "Default", Color(50,50,75,100), Color(255,255,255,255) )endPlugin.Hooks = {	ThinkPlayer = Plugin.ThinkPlayer,	HUDPaintEntity = Plugin.HUDPaintEntity}qq.RegisterPlugin(Plugin)